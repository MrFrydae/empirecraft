From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 16 Jan 2019 21:29:20 -0500
Subject: [PATCH] Add API to skip checking names for exact stack matches


diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index e7796054f3f65f5bea7f93c75320195f6c2f0561..a4fc1ccc16bcd37e124f09fbbf7db9ecac59eb04 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -7,6 +7,8 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
+
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Tag;
@@ -200,7 +202,17 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
             this(Arrays.asList(stacks));
         }
 
+        // Paper start
+        private final boolean skipCheckingName;
         public ExactChoice(@NotNull List<ItemStack> choices) {
+            this(choices, false);
+        }
+        public ExactChoice(@NotNull ItemStack stack, boolean skipCheckingName) {
+            this(Arrays.asList(stack), skipCheckingName);
+        }
+        public ExactChoice(@NotNull List<ItemStack> choices, boolean skipCheckingName) {
+            this.skipCheckingName = skipCheckingName;
+            // Paper end
             Preconditions.checkArgument(choices != null, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
             for (ItemStack choice : choices) {
@@ -208,7 +220,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
                 Preconditions.checkArgument(!choice.getType().isAir(), "Cannot have empty/air choice");
             }
 
-            this.choices = new ArrayList<>(choices);
+            this.choices = choices.stream().map(ItemStack::ensureServerConversions).collect(Collectors.toList()); // Paper
         }
 
         @NotNull
@@ -242,7 +254,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @Override
         public boolean test(@NotNull ItemStack t) {
             for (ItemStack match : choices) {
-                if (t.isSimilar(match)) {
+                if (t.isSimilar(match, false, skipCheckingName)) { // Paper
                     return true;
                 }
             }
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 28e8d4e4f354b304f32cd8f14dcff7166a7bb37e..9458139cfde8b320bf86ee8f030d05983513a153 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -176,6 +176,10 @@ public class ShapedRecipe extends CraftingRecipe {
         Preconditions.checkArgument(!item.getType().isAir(), "Item cannot be air"); // Paper
         return setIngredient(key, new RecipeChoice.ExactChoice(item.clone())); // Paper
     }
+    @NotNull
+    public ShapedRecipe setIngredient(char key, @NotNull ItemStack item, boolean skipCheckingName) {
+        return setIngredient(key, new RecipeChoice.ExactChoice(item.clone(), skipCheckingName));
+    }
     // Paper end
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index 8251170314ab25c26270208e453b4e3909435754..08710cb4498fb6874abaa83614cc038b508a6d4d 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -138,16 +138,26 @@ public class ShapelessRecipe extends CraftingRecipe {
     // Paper start
     @NotNull
     public ShapelessRecipe addIngredient(@NotNull ItemStack item) {
-        return addIngredient(item.getAmount(), item);
+        return addIngredient(item.getAmount(), item, false);
+    }
+
+    @NotNull
+    public ShapelessRecipe addIngredient(@NotNull ItemStack item, boolean skipCheckingName) {
+        return addIngredient(item.getAmount(), item, skipCheckingName);
     }
 
     @NotNull
     public ShapelessRecipe addIngredient(int count, @NotNull ItemStack item) {
+        return addIngredient(count, item, false);
+    }
+
+    @NotNull
+    public ShapelessRecipe addIngredient(int count, @NotNull ItemStack item, boolean skipCheckingName) {
         Preconditions.checkArgument(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
         Preconditions.checkArgument(!item.getType().isAir(), "Item cannot be air"); // Paper
         item = item.clone(); // Paper
         while (count-- > 0) {
-            ingredients.add(new RecipeChoice.ExactChoice(item));
+            ingredients.add(new RecipeChoice.ExactChoice(item.clone(), skipCheckingName));
         }
         return this;
     }
